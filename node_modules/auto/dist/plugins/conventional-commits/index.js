"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var parse_commit_message_1 = require("parse-commit-message");
var ConventionalCommitsPlugin = /** @class */ (function () {
    function ConventionalCommitsPlugin() {
        this.name = 'Conventional Commits Parser';
    }
    ConventionalCommitsPlugin.prototype.apply = function (auto) {
        var _this = this;
        auto.hooks.onCreateLogParse.tap(this.name, function (logParse) {
            logParse.hooks.parseCommit.tap(_this.name, function (commit) {
                try {
                    var _a = __read(parse_commit_message_1.applyPlugins(parse_commit_message_1.mappers.increment, parse_commit_message_1.parse(commit.subject)), 1), conventionalCommit = _a[0];
                    if (conventionalCommit.header && conventionalCommit.increment) {
                        commit.labels = __spread(commit.labels, [
                            auto.semVerLabels.get(conventionalCommit.increment)
                        ]);
                    }
                }
                catch (error) {
                    auto.logger.verbose.info("No conventional commit message found for " + commit.hash);
                }
                return commit;
            });
        });
    };
    return ConventionalCommitsPlugin;
}());
exports.default = ConventionalCommitsPlugin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcGx1Z2lucy9jb252ZW50aW9uYWwtY29tbWl0cy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsNkRBQW9FO0FBS3BFO0lBQUE7UUFDRSxTQUFJLEdBQUcsNkJBQTZCLENBQUM7SUE2QnZDLENBQUM7SUEzQkMseUNBQUssR0FBTCxVQUFNLElBQVU7UUFBaEIsaUJBMEJDO1FBekJDLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsVUFBQSxRQUFRO1lBQ2pELFFBQVEsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxLQUFJLENBQUMsSUFBSSxFQUFFLFVBQUEsTUFBTTtnQkFDOUMsSUFBSTtvQkFDSSxJQUFBLDJJQUdMLEVBSE0sMEJBR04sQ0FBQztvQkFFRixJQUFJLGtCQUFrQixDQUFDLE1BQU0sSUFBSSxrQkFBa0IsQ0FBQyxTQUFTLEVBQUU7d0JBQzdELE1BQU0sQ0FBQyxNQUFNLFlBQ1IsTUFBTSxDQUFDLE1BQU07NEJBQ2hCLElBQUksQ0FBQyxZQUFhLENBQUMsR0FBRyxDQUNwQixrQkFBa0IsQ0FBQyxTQUF5QixDQUM1QzswQkFDSCxDQUFDO3FCQUNIO2lCQUNGO2dCQUFDLE9BQU8sS0FBSyxFQUFFO29CQUNkLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FDdEIsOENBQTRDLE1BQU0sQ0FBQyxJQUFNLENBQzFELENBQUM7aUJBQ0g7Z0JBRUQsT0FBTyxNQUFNLENBQUM7WUFDaEIsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFDSCxnQ0FBQztBQUFELENBQUMsQUE5QkQsSUE4QkMifQ==