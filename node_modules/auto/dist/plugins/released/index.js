"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var deepmerge_1 = __importDefault(require("deepmerge"));
var TYPE = '%TYPE';
var VERSION = '%VERSION';
var defaultOptions = {
    label: 'released',
    lockIssues: false,
    message: ":rocket: " + TYPE + " was released in " + VERSION + " :rocket:"
};
var closeIssue = /(?:Close|Closes|Closed|Fix|Fixes|Fixed|Resolve|Resolves|Resolved)\s((?:#\d+(?:,\s)?)+)/gi;
var ReleasedLabelPlugin = /** @class */ (function () {
    function ReleasedLabelPlugin(options) {
        if (options === void 0) { options = {}; }
        this.name = 'Released Label';
        this.options = deepmerge_1.default(defaultOptions, options);
    }
    ReleasedLabelPlugin.prototype.apply = function (auto) {
        var _this = this;
        auto.hooks.modifyConfig.tap(this.name, function (config) {
            config.labels.released = config.labels.released || {
                name: 'released',
                description: 'This issue/pull request has been released.'
            };
            return config;
        });
        auto.hooks.afterRelease.tapPromise(this.name, function (newVersion, commits) { return __awaiter(_this, void 0, void 0, function () {
            var head, isSkipped;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!newVersion) {
                            return [2 /*return*/];
                        }
                        if (auto.args.dryRun) {
                            return [2 /*return*/];
                        }
                        head = commits[0];
                        if (!head) {
                            return [2 /*return*/];
                        }
                        isSkipped = head.labels.find(function (label) {
                            return auto.release.options.skipReleaseLabels.includes(label);
                        });
                        if (isSkipped) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, Promise.all(commits.map(function (commit) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                return [2 /*return*/, this.addReleased(auto, commit, newVersion)];
                            }); }); }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    };
    ReleasedLabelPlugin.prototype.addReleased = function (auto, commit, newVersion) {
        return __awaiter(this, void 0, void 0, function () {
            var messages, pr, commitsInPr, issues;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        messages = [commit.subject];
                        if (!commit.pullRequest) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.addCommentAndLabel(auto, newVersion, commit.pullRequest.number)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, auto.git.getPullRequest(commit.pullRequest.number)];
                    case 2:
                        pr = _a.sent();
                        pr.data.body.split('\n').map(function (line) { return messages.push(line); });
                        return [4 /*yield*/, auto.git.getCommitsForPR(commit.pullRequest.number)];
                    case 3:
                        commitsInPr = _a.sent();
                        commitsInPr.map(function (c) { return messages.push(c.commit.message); });
                        _a.label = 4;
                    case 4:
                        issues = messages
                            .map(function (message) { return message.match(closeIssue); })
                            .filter(function (r) { return !!r; })
                            .reduce(function (all, arr) { return __spread(all, arr); }, [])
                            .map(function (issue) { return issue.match(/#(\d+)/i); })
                            .filter(function (r) { return !!r; })
                            .map(function (match) { return Number(match[1]); });
                        return [4 /*yield*/, Promise.all(issues.map(function (issue) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.addCommentAndLabel(auto, newVersion, issue, true)];
                                        case 1:
                                            _a.sent();
                                            if (!this.options.lockIssues) return [3 /*break*/, 3];
                                            return [4 /*yield*/, auto.git.lockIssue(issue)];
                                        case 2:
                                            _a.sent();
                                            _a.label = 3;
                                        case 3: return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 5:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ReleasedLabelPlugin.prototype.addCommentAndLabel = function (auto, newVersion, prOrIssue, isIssue) {
        if (isIssue === void 0) { isIssue = false; }
        return __awaiter(this, void 0, void 0, function () {
            var comment, labels;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        comment = this.createReleasedComment(isIssue, newVersion);
                        return [4 /*yield*/, auto.git.createComment(comment, prOrIssue, 'released')];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, auto.git.getLabels(prOrIssue)];
                    case 2:
                        labels = _a.sent();
                        if (!!labels.includes(this.options.label)) return [3 /*break*/, 4];
                        return [4 /*yield*/, auto.git.addLabelToPr(prOrIssue, this.options.label)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ReleasedLabelPlugin.prototype.createReleasedComment = function (isIssue, version) {
        return this.options.message
            .replace(TYPE, isIssue ? 'Issue' : 'PR')
            .replace(VERSION, version);
    };
    return ReleasedLabelPlugin;
}());
exports.default = ReleasedLabelPlugin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcGx1Z2lucy9yZWxlYXNlZC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSx3REFBOEI7QUFXOUIsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDO0FBQ3JCLElBQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQztBQUMzQixJQUFNLGNBQWMsR0FBRztJQUNyQixLQUFLLEVBQUUsVUFBVTtJQUNqQixVQUFVLEVBQUUsS0FBSztJQUNqQixPQUFPLEVBQUUsY0FBWSxJQUFJLHlCQUFvQixPQUFPLGNBQVc7Q0FDaEUsQ0FBQztBQUVGLElBQU0sVUFBVSxHQUFHLDBGQUEwRixDQUFDO0FBRTlHO0lBS0UsNkJBQVksT0FBa0Q7UUFBbEQsd0JBQUEsRUFBQSxZQUFrRDtRQUo5RCxTQUFJLEdBQUcsZ0JBQWdCLENBQUM7UUFLdEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxtQkFBSyxDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsbUNBQUssR0FBTCxVQUFNLElBQVU7UUFBaEIsaUJBMENDO1FBekNDLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFVBQUEsTUFBTTtZQUMzQyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsSUFBSTtnQkFDakQsSUFBSSxFQUFFLFVBQVU7Z0JBQ2hCLFdBQVcsRUFBRSw0Q0FBNEM7YUFDMUQsQ0FBQztZQUVGLE9BQU8sTUFBTSxDQUFDO1FBQ2hCLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUNoQyxJQUFJLENBQUMsSUFBSSxFQUNULFVB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