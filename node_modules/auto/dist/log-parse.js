"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var make_hooks_1 = require("./utils/make-hooks");
function filterServiceAccounts(commit) {
    var SERVICE_ACCOUNTS = ['pdbf'];
    if (commit.authorName && SERVICE_ACCOUNTS.includes(commit.authorName)) {
        return true;
    }
}
exports.filterServiceAccounts = filterServiceAccounts;
function parsePR(commit) {
    var merge = /Merge pull request #(\d+) from (.+)\n([\S\s]+)/;
    var prMatch = commit.subject.match(merge);
    if (!prMatch) {
        return commit;
    }
    return __assign({}, commit, { pullRequest: {
            number: Number(prMatch[1]),
            base: prMatch[2]
        }, subject: prMatch[3].trim() });
}
exports.parsePR = parsePR;
function parseSquashPR(commit) {
    var firstLine = commit.subject.split('\n')[0];
    var squashMerge = /\(#(\d+)\)$/;
    var squashMergeMatch = firstLine.match(squashMerge);
    if (!squashMergeMatch) {
        return commit;
    }
    return __assign({}, commit, { pullRequest: {
            number: Number(squashMergeMatch[1])
        }, subject: firstLine
            .substr(0, firstLine.length - squashMergeMatch[0].length)
            .trim() });
}
exports.parseSquashPR = parseSquashPR;
function parseJira(commit) {
    // Support 'JIRA-XXX:' and '[JIRA-XXX]' and '[JIRA-XXX] - '
    var jira = /^\[?([\w]{3,}-\d+)\]?:?\s?[-\s]*([\S ]+)?/;
    var matches = [];
    var currentMatch = commit.subject.match(jira);
    while (currentMatch) {
        matches.push(currentMatch);
        currentMatch = currentMatch[2].match(jira);
    }
    if (!matches.length) {
        return commit;
    }
    return __assign({}, commit, { jira: {
            number: matches.map(function (match) { return match[1]; })
        }, subject: matches[matches.length - 1][2].trim() });
}
exports.parseJira = parseJira;
var LogParse = /** @class */ (function () {
    function LogParse() {
        this.hooks = make_hooks_1.makeLogParseHooks();
        this.hooks.parseCommit.tap('Merge Commit', parsePR);
        this.hooks.parseCommit.tap('Squash Merge Commit', parseSquashPR);
        this.hooks.parseCommit.tap('Jira', parseJira);
        this.hooks.omitCommit.tap('Service Accounts', filterServiceAccounts);
    }
    LogParse.prototype.normalizeCommits = function (commits) {
        return __awaiter(this, void 0, void 0, function () {
            var eCommits;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all(commits.map(function (commit) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                            return [2 /*return*/, this.normalizeCommit(commit)];
                        }); }); }))];
                    case 1:
                        eCommits = _a.sent();
                        return [2 /*return*/, eCommits.filter(Boolean)];
                }
            });
        });
    };
    LogParse.prototype.normalizeCommit = function (commit) {
        return __awaiter(this, void 0, void 0, function () {
            var extended, shouldOmit;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.hooks.parseCommit.promise(__assign({ labels: [] }, commit, { authors: [{ name: commit.authorName, email: commit.authorEmail }] }))];
                    case 1:
                        extended = _a.sent();
                        return [4 /*yield*/, this.hooks.omitCommit.promise(extended)];
                    case 2:
                        shouldOmit = _a.sent();
                        if (shouldOmit) {
                            return [2 /*return*/];
                        }
                        return [2 /*return*/, extended];
                }
            });
        });
    };
    return LogParse;
}());
exports.default = LogParse;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLXBhcnNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2xvZy1wYXJzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSxpREFBdUQ7QUF1QnZELFNBQWdCLHFCQUFxQixDQUFDLE1BQXVCO0lBQzNELElBQU0sZ0JBQWdCLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVsQyxJQUFJLE1BQU0sQ0FBQyxVQUFVLElBQUksZ0JBQWdCLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRTtRQUNyRSxPQUFPLElBQUksQ0FBQztLQUNiO0FBQ0gsQ0FBQztBQU5ELHNEQU1DO0FBRUQsU0FBZ0IsT0FBTyxDQUFDLE1BQXVCO0lBQzdDLElBQU0sS0FBSyxHQUFHLGdEQUFnRCxDQUFDO0lBQy9ELElBQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRTVDLElBQUksQ0FBQyxPQUFPLEVBQUU7UUFDWixPQUFPLE1BQU0sQ0FBQztLQUNmO0lBRUQsb0JBQ0ssTUFBTSxJQUNULFdBQVcsRUFBRTtZQUNYLE1BQU0sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFCLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1NBQ2pCLEVBQ0QsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFDMUI7QUFDSixDQUFDO0FBaEJELDBCQWdCQztBQUVELFNBQWdCLGFBQWEsQ0FBQyxNQUF1QjtJQUNuRCxJQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxJQUFNLFdBQVcsR0FBRyxhQUFhLENBQUM7SUFFbEMsSUFBTSxnQkFB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