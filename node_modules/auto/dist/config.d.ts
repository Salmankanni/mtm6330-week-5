import cosmiconfig from 'cosmiconfig';
import { ArgsType } from './cli/args';
import { ILogger } from './utils/logger';
export default class Config {
    logger: ILogger;
    constructor(logger: ILogger);
    /**
     * Load the .autorc from the file system, set up defaults, combine with CLI args
     * load the extends property, load the plugins and start the git remote interface.
     */
    loadConfig(args: ArgsType): Promise<{
        labels: import("./release").ILabelDefinitionMap;
        skipReleaseLabels: any;
        command: string;
        githubApi?: string | undefined;
        plugins?: string[] | undefined;
        owner?: string | undefined;
        repo?: string | undefined;
        verbose?: boolean | undefined;
        veryVerbose?: boolean | undefined;
        onlyLabels?: boolean | undefined;
        dryRun?: boolean | undefined;
    } | {
        labels: import("./release").ILabelDefinitionMap;
        skipReleaseLabels: any;
        command: string;
        githubApi?: string | undefined;
        plugins?: string[] | undefined;
        owner?: string | undefined;
        repo?: string | undefined;
        verbose?: boolean | undefined;
        veryVerbose?: boolean | undefined;
        dryRun?: boolean | undefined;
    } | {
        labels: import("./release").ILabelDefinitionMap;
        skipReleaseLabels: any;
        command: string;
        githubApi?: string | undefined;
        plugins?: string[] | undefined;
        owner?: string | undefined;
        repo?: string | undefined;
        verbose?: boolean | undefined;
        veryVerbose?: boolean | undefined;
        pr?: number | undefined;
    } | {
        labels: import("./release").ILabelDefinitionMap;
        skipReleaseLabels: any;
        command: string;
        githubApi?: string | undefined;
        plugins?: string[] | undefined;
        owner?: string | undefined;
        repo?: string | undefined;
        verbose?: boolean | undefined;
        veryVerbose?: boolean | undefined;
        pr: number;
        url?: string | undefined;
        context?: string | undefined;
        dryRun?: boolean | undefined;
    } | {
        labels: import("./release").ILabelDefinitionMap;
        skipReleaseLabels: any;
        command: string;
        githubApi?: string | undefined;
        plugins?: string[] | undefined;
        owner?: string | undefined;
        repo?: string | undefined;
        verbose?: boolean | undefined;
        veryVerbose?: boolean | undefined;
        sha?: string | undefined;
        pr?: number | undefined;
        url: string;
        state: "error" | "pending" | "success" | "failure";
        description: string;
        context: string;
        dryRun?: boolean | undefined;
    } | {
        labels: import("./release").ILabelDefinitionMap;
        skipReleaseLabels: any;
        command: string;
        githubApi?: string | undefined;
        plugins?: string[] | undefined;
        owner?: string | undefined;
        repo?: string | undefined;
        verbose?: boolean | undefined;
        veryVerbose?: boolean | undefined;
        pr: number;
        message: string;
        context?: string | undefined;
        dryRun?: boolean | undefined;
    } | {
        labels: import("./release").ILabelDefinitionMap;
        skipReleaseLabels: any;
        command: string;
        githubApi?: string | undefined;
        plugins?: string[] | undefined;
        owner?: string | undefined;
        repo?: string | undefined;
        verbose?: boolean | undefined;
        veryVerbose?: boolean | undefined;
        noVersionPrefix?: boolean | undefined;
        jira?: string | undefined;
        dryRun?: boolean | undefined;
        useVersion?: string | undefined;
        slack?: string | undefined;
        name?: string | undefined;
        email?: string | undefined;
    } | {
        labels: import("./release").ILabelDefinitionMap;
        skipReleaseLabels: any;
        command: string;
        githubApi?: string | undefined;
        plugins?: string[] | undefined;
        owner?: string | undefined;
        repo?: string | undefined;
        verbose?: boolean | undefined;
        veryVerbose?: boolean | undefined;
        onlyPublishWithReleaseLabel?: boolean | undefined;
    } | {
        labels: import("./release").ILabelDefinitionMap;
        skipReleaseLabels: any;
        command: string;
        githubApi?: string | undefined;
        plugins?: string[] | undefined;
        owner?: string | undefined;
        repo?: string | undefined;
        verbose?: boolean | undefined;
        veryVerbose?: boolean | undefined;
        dryRun?: boolean | undefined;
        slack?: string | undefined;
    }>;
    /**
     * Loads a config from a path, package name, or special `auto-config` pattern
     *
     * ex: auto-config-MY_CONFIG
     * ex: @MY_CONFIG/auto-config
     *
     * @param extend Path or name of config to find
     */
    loadExtendConfig(extend: string): cosmiconfig.Config;
}
