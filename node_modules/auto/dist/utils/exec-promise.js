"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var child_process_1 = require("child_process");
/**
 * Wraps up running a command into a single promise,
 * returning the stdout as a string if the command succeeds
 * and throwing if it does not.
 *
 * @param cmd the command as a string to pass in
 */
function execPromise(cmd, args) {
    return __awaiter(this, void 0, void 0, function () {
        var _this = this;
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (completed, reject) {
                    var child = child_process_1.spawn(cmd, args || [], {
                        cwd: process.cwd(),
                        env: process.env,
                        shell: true
                    });
                    var allStdout = '';
                    child.stdout.on('data', function (data) { return __awaiter(_this, void 0, void 0, function () {
                        var stdout;
                        return __generator(this, function (_a) {
                            stdout = data.toString();
                            allStdout += stdout;
                            return [2 /*return*/];
                        });
                    }); });
                    var allStderr = '';
                    child.stderr.on('data', function (data) {
                        var stderr = data.toString();
                        allStderr += stderr;
                    });
                    // This usually occurs during dev-time, when you have the wrong command
                    child.on('error', function (err) {
                        reject(new Error("Failed to run '" + cmd + "' - " + err.message + " \n\n\n" + allStderr));
                    });
                    child.on('exit', function (code) {
                        // No code, no errors
                        if (!code) {
                            // Tools can occasionally print to stderr but not fail, so print that just in case.
                            if (allStderr.length) {
                                console.log(allStderr);
                            }
                            // Resolve the string of the whole stdout
                            completed(allStdout.trim());
                        }
                        else {
                            // The command bailed for whatever reason, print a verbose error message
                            // with the stdout underneath
                            var appendedStdErr = '';
                            appendedStdErr += allStdout.length ? "\n\n" + allStdout : '';
                            appendedStdErr += allStderr.length ? "\n\n" + allStderr : '';
                            reject(new Error("Running command '" + cmd + "' failed" + appendedStdErr));
                        }
                    });
                })];
        });
    });
}
exports.default = execPromise;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhlYy1wcm9taXNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL2V4ZWMtcHJvbWlzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsK0NBQXNDO0FBRXRDOzs7Ozs7R0FNRztBQUNILFNBQThCLFdBQVcsQ0FBQyxHQUFXLEVBQUUsSUFBZTs7OztZQUNwRSxzQkFBTyxJQUFJLE9BQU8sQ0FBUyxVQUFDLFNBQVMsRUFBRSxNQUFNO29CQUMzQyxJQUFNLEtBQUssR0FBRyxxQkFBSyxDQUFDLEdBQUcsRUFBRSxJQUFJLElBQUksRUFBRSxFQUFFO3dCQUNuQyxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsRUFBRTt3QkFDbEIsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHO3dCQUNoQixLQUFLLEVBQUUsSUFBSTtxQkFDWixDQUFDLENBQUM7b0JBRUgsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO29CQUNuQixLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsVUFBTyxJQUFZOzs7NEJBQ25DLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7NEJBQy9CLFNBQVMsSUFBSSxNQUFNLENBQUM7Ozt5QkFDckIsQ0FBQyxDQUFDO29CQUVILElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztvQkFDbkIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLFVBQUMsSUFBWTt3QkFDbkMsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO3dCQUMvQixTQUFTLElBQUksTUFBTSxDQUFDO29CQUN0QixDQUFDLENBQUMsQ0FBQztvQkFFSCx1RUFBdUU7b0JBQ3ZFLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLFVBQUEsR0FBRzt3QkFDbkIsTUFBTSxDQUNKLElBQUksS0FBSyxDQUFDLG9CQUFrQixHQUFHLFlBQU8sR0FBRyxDQUFDLE9BQU8sZUFBVSxTQUFXLENBQUMsQ0FDeEUsQ0FBQztvQkFDSixDQUFDLENBQUMsQ0FBQztvQkFFSCxLQUFLLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxVQUFBLElBQUk7d0JBQ25CLHFCQUFxQjt3QkFDckIsSUFBSSxDQUFDLElBQUksRUFBRTs0QkFDVCxtRkFBbUY7NEJBQ25GLElBQUksU0FBUyxDQUFDLE1BQU0sRUFBRTtnQ0FDcEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQzs2QkFDeEI7NEJBQ0QseUNBQXlDOzRCQUN6QyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7eUJBQzdCOzZCQUFNOzRCQUNMLHdFQUF3RTs0QkFDeEUsNkJBQTZCOzRCQUM3QixJQUFJLGNBQWMsR0FBRyxFQUFFLENBQUM7NEJBQ3hCLGNBQWMsSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFPLFNBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDOzRCQUM3RCxjQUFjLElBQUksU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBTyxTQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQzs0QkFFN0QsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLHNCQUFvQixHQUFHLGdCQUFXLGNBQWdCLENBQUMsQ0FBQyxDQUFDO3lCQUN2RTtvQkFDSCxDQUFDLENBQUMsQ0FBQztnQkFDTCxDQUFDLENBQUMsRUFBQzs7O0NBQ0o7QUEvQ0QsOEJBK0NDIn0=