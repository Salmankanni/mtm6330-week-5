"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = __importStar(require("fs"));
var path = __importStar(require("path"));
var chalk_1 = __importDefault(require("chalk"));
var command_line_args_1 = __importDefault(require("command-line-args"));
var command_line_usage_1 = __importDefault(require("command-line-usage"));
var signale_1 = __importDefault(require("signale"));
var p = chalk_1.default.hex('#870048');
var y = chalk_1.default.hex('#F1A60E');
var r = chalk_1.default.hex('#C5000B');
var g = chalk_1.default.hex('#888888');
// prettier-ignore
var logo = "\n      " + y('_________') + "\n     " + p('/') + y('\\       /') + r('\\') + "                   _______ _     _ _______  _____\n    " + p('/') + "  " + y('\\_____/') + "  " + r('\\') + "                  |_____| |     |    |    |     |\n   " + p('/   /') + "     " + r('\\   \\') + "                 |     | |_____|    |    |_____|\n  " + p('/___/') + " \\\u2594\u2594\\ " + r(' \\___\\') + "\n  " + g('\\   \\') + "  \\_/  " + g('/   /') + "     ______ _______        _______ _______ _______ _______\n   " + g('\\   \\') + "     " + g('/   /') + "     |_____/ |______ |      |______ |_____| |______ |______\n    " + g('\\   ▔▔▔▔▔   /') + "      |    \\_ |______ |_____ |______ |     | ______| |______\n     " + g('\\         /') + "\n      " + g('▔▔▔▔▔▔▔▔▔ ') + "\n";
var help = {
    name: 'help',
    alias: 'h',
    type: Boolean
};
var version = {
    name: 'version',
    alias: 'V',
    type: Boolean,
    description: "Display auto's version"
};
var mainDefinitions = [
    { name: 'command', type: String, defaultOption: true },
    __assign({}, help, { description: 'Display the help output. Works on each command as well' }),
    version
];
var defaultOptions = [
    __assign({}, help, { description: 'Display the help output for the command', group: 'misc' }),
    {
        name: 'verbose',
        alias: 'v',
        type: Boolean,
        description: 'Show some more logs',
        group: 'misc'
    },
    {
        name: 'very-verbose',
        alias: 'w',
        type: Boolean,
        description: 'Show a lot more logs',
        group: 'misc'
    },
    {
        name: 'repo',
        type: String,
        description: 'The repo to set the status on. Defaults to looking in the package definition for the platform',
        group: 'misc'
    },
    {
        name: 'owner',
        type: String,
        description: 'The owner of the GitHub repo. Defaults to reading from the package definition for the platform',
        group: 'misc'
    },
    {
        name: 'github-api',
        type: String,
        description: 'GitHub API to use',
        group: 'misc'
    },
    {
        name: 'plugins',
        type: String,
        multiple: true,
        description: 'Plugins to load auto with. (defaults to just npm)',
        group: 'misc'
    }
];
var pr = {
    name: 'pr',
    type: Number,
    description: 'The pull request number you want the labels of',
    group: 'main'
};
var dryRun = {
    name: 'dry-run',
    alias: 'd',
    type: Boolean,
    description: 'Report what command will do but do not actually do anything',
    group: 'main'
};
var url = {
    name: 'url',
    type: String,
    description: 'URL to associate with this status',
    group: 'main'
};
var noVersionPrefix = {
    name: 'no-version-prefix',
    type: Boolean,
    description: "Use the version as the tag without the 'v' prefix",
    group: 'main'
};
var jira = {
    name: 'jira',
    type: String,
    description: 'Jira base URL',
    group: 'main'
};
var name = {
    name: 'name',
    type: String,
    description: 'Git name to commit and release with. Defaults to package definition for the platform',
    group: 'main'
};
var email = {
    name: 'email',
    type: String,
    description: 'Git email to commit with. Defaults to package definition for the platform',
    group: 'main'
};
var context = {
    name: 'context',
    type: String,
    description: 'A string label to differentiate this status from others',
    group: 'main'
};
var message = {
    name: 'message',
    group: 'main',
    type: String,
    alias: 'm'
};
var skipReleaseLabels = {
    name: 'skip-release-labels',
    type: String,
    group: 'main',
    multiple: true,
    description: "Labels that will not create a release. Defaults to just 'skip-release'"
};
var commands = [
    {
        name: 'init',
        summary: 'Interactive setup for most configurable options',
        examples: ['{green $} auto init'],
        options: [
            {
                name: 'only-labels',
                type: Boolean,
                group: 'main',
                description: 'Only run init for the labels. As most other options are for advanced users'
            },
            dryRun
        ]
    },
    {
        name: 'create-labels',
        summary: "Create your project's labels on github. If labels exist it will update them.",
        examples: ['{green $} auto create-labels'],
        options: __spread(defaultOptions, [dryRun])
    },
    {
        name: 'label',
        summary: 'Get the labels for a pull request',
        options: __spread([
            __assign({}, pr, { description: pr.description + " (defaults to last merged PR)" })
        ], defaultOptions),
        examples: ['{green $} auto label --pr 123']
    },
    {
        name: 'pr-check',
        summary: 'Check that a pull request has a SemVer label',
        require: ['pr', 'url'],
        options: __spread([
            pr,
            url,
            dryRun,
            __assign({}, context, { defaultValue: 'ci/pr-check' }),
            skipReleaseLabels
        ], defaultOptions),
        examples: [
            '{green $} auto pr-check --pr 32 --url http://your-ci.com/build/123'
        ]
    },
    {
        name: 'pr',
        summary: 'Set the status on a PR commit',
        require: ['state', 'url', 'description', 'context'],
        options: __spread([
            {
                name: 'sha',
                type: String,
                group: 'main',
                description: 'Specify a custom git sha. Defaults to the HEAD for a git repo in the current repository'
            },
            __assign({}, pr, { description: 'PR to set the status on' }),
            url,
            {
                name: 'state',
                type: String,
                group: 'main',
                description: "State of the PR. ['pending', 'success', 'error', 'failure']"
            },
            {
                name: 'description',
                type: String,
                group: 'main',
                description: 'A description of the status'
            },
            {
                name: 'context',
                type: String,
                group: 'main',
                description: 'A string label to differentiate this status from others'
            },
            dryRun
        ], defaultOptions),
        examples: [
            "{green $} auto pr \\\\ \n   --pr 32 \\\\ \n   --state pending \\\\ \n   --description \"Build still running...\" \\\\ \n   --context build-check"
        ]
    },
    {
        name: 'version',
        summary: 'Get the semantic version bump for the given changes.',
        options: __spread([
            {
                name: 'only-publish-with-release-label',
                type: Boolean,
                description: "Only bump version if 'release' label is on pull request",
                group: 'main'
            },
            skipReleaseLabels
        ], defaultOptions),
        examples: [
            {
                desc: 'Get the new version using the last release to head',
                example: '{green $} auto version'
            },
            {
                desc: 'Skip releases with multiple labels',
                example: '{green $} auto version --skip-release-labels documentation CI'
            }
        ]
    },
    {
        name: 'changelog',
        summary: "Prepend release notes to 'CHANGELOG.md'",
        options: __spread([
            dryRun,
            noVersionPrefix,
            name,
            email,
            jira,
            {
                name: 'from',
                type: String,
                group: 'main',
                description: 'Tag to start changelog generation on. Defaults to latest tag.'
            },
            {
                name: 'to',
                type: String,
                group: 'main',
                description: 'Tag to end changelog generation on. Defaults to HEAD.'
            },
            __assign({}, message, { description: "Message to commit the changelog with. Defaults to 'Update CHANGELOG.md [skip ci]'" })
        ], defaultOptions),
        examples: [
            {
                desc: 'Generate a changelog from the last release to head',
                example: '{green $} auto changelog'
            },
            {
                desc: 'Generate a changelog across specific versions',
                example: '{green $} auto changelog --from v0.20.1 --to v0.21.0'
            }
        ]
    },
    {
        name: 'release',
        summary: 'Auto-generate a github release',
        options: __spread([
            dryRun,
            noVersionPrefix,
            name,
            email,
            jira,
            {
                name: 'use-version',
                type: String,
                group: 'main',
                description: 'Version number to publish as. Defaults to reading from the package definition for the platform.'
            },
            {
                name: 'slack',
                alias: 's',
                type: String,
                group: 'main',
                description: 'Url to post a slack message to about the release. Make sure the SLACK_TOKEN environment variable is set.'
            }
        ], defaultOptions),
        examples: ['{green $} auto release']
    },
    {
        name: 'comment',
        summary: 'Comment on a pull request with a markdown message',
        require: ['pr', 'message'],
        options: __spread([
            pr,
            context,
            __assign({}, message, { description: 'Message to post to comment' }),
            dryRun
        ], defaultOptions),
        examples: [
            '{green $} auto comment --pr 123 --comment "# Why you\'re wrong..."'
        ]
    },
    {
        name: 'shipit',
        summary: 'Run the full `auto` release pipeline. Detects if in a lerna project',
        examples: ['{green $} auto shipit'],
        options: __spread(defaultOptions, [dryRun])
    }
];
function filterCommands(allCommands, include) {
    return allCommands
        .filter(function (command) { return include.includes(command.name); })
        .map(function (command) { return ({
        name: command.name,
        summary: command.summary
    }); });
}
function printRootHelp() {
    var options = __spread([
        __assign({}, version, { group: 'misc' })
    ], mainDefinitions, defaultOptions);
    options.forEach(function (option) {
        styleTypes({}, option);
    });
    var usage = command_line_usage_1.default([
        {
            content: logo.replace(/\\/g, '\\\\'),
            raw: true
        },
        {
            content: 'Generate releases based on semantic version labels on pull requests'
        },
        {
            header: 'Synopsis',
            content: '$ auto <command> <options>'
        },
        {
            header: 'Setup Commands',
            content: filterCommands(commands, ['init', 'create-labels'])
        },
        {
            header: 'Release Commands',
            content: filterCommands(commands, [
                'release',
                'version',
                'changelog',
                'shipit'
            ])
        },
        {
            header: 'Pull Request Interaction Commands',
            content: filterCommands(commands, ['label', 'pr-check', 'pr', 'comment'])
        },
        {
            header: 'Global Options',
            optionList: options,
            group: 'misc'
        }
    ]);
    console.log(usage);
}
function printCommandHelp(command) {
    var sections = [
        {
            header: "auto " + command.name,
            content: command.summary
        }
    ];
    if (command.options) {
        var hasLocalOptions = command.options.filter(function (option) { return option.group === 'main'; });
        if (hasLocalOptions.length > 0) {
            sections.push({
                header: 'Options',
                optionList: command.options,
                group: 'main'
            });
        }
        var hasGlobalOptions = command.options.filter(function (option) { return option.group === 'misc'; });
        if (hasGlobalOptions.length > 0) {
            sections.push({
                header: 'Global Options',
                optionList: command.options,
                group: 'misc'
            });
        }
    }
    sections.push({
        header: 'Examples',
        content: command.examples,
        raw: command.name === 'pr'
    });
    console.log(command_line_usage_1.default(sections));
}
function printVersion() {
    var packagePath = path.join(__dirname, '../../package.json');
    var packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
    console.log("v" + packageJson.version);
}
function styleTypes(command, option) {
    var isRequired = command.require && command.require.includes(option.name);
    if (isRequired && option.type === Number) {
        option.typeLabel =
            '{rgb(173, 216, 230) {underline number}} [{rgb(254,91,92) required}]';
    }
    else if (option.type === Number) {
        option.typeLabel = '{rgb(173, 216, 230) {underline number}}';
    }
    if (isRequired && option.type === String) {
        option.typeLabel =
            '{rgb(173, 216, 230) {underline string}} [{rgb(254,91,92) required}]';
    }
    else if (option.multiple && option.type === String) {
        option.typeLabel = '{rgb(173, 216, 230) {underline string[]}}';
    }
    else if (option.type === String) {
        option.typeLabel = '{rgb(173, 216, 230) {underline string}}';
    }
}
function parseArgs(testArgs) {
    var mainOptions = command_line_args_1.default(mainDefinitions, {
        stopAtFirstUnknown: true,
        camelCase: true,
        argv: testArgs
    });
    var argv = mainOptions._unknown || [];
    var command = commands.find(function (c) { return c.name === mainOptions.command; });
    if (!command && mainOptions.version) {
        printVersion();
        return;
    }
    if (!command) {
        printRootHelp();
        return;
    }
    var options = command.options || [];
    options.forEach(function (option) {
        styleTypes(command, option);
    });
    if (mainOptions.help) {
        printCommandHelp(command);
        return;
    }
    var autoOptions = __assign({ command: mainOptions.command }, command_line_args_1.default(options, { argv: argv, camelCase: true })._all);
    if (command.require) {
        var missing = command.require
            .filter(function (option) {
            return !autoOptions.hasOwnProperty(option) ||
                // tslint:disable-next-line strict-type-predicates
                autoOptions[option] === null;
        })
            .map(function (option) { return "--" + option; });
        var multiple = missing.length > 1;
        if (missing.length > 0) {
            printCommandHelp(command);
            signale_1.default.error("Missing required flag" + (multiple ? 's' : '') + ": " + missing.join(', '));
            return process.exit(1);
        }
    }
    return autoOptions;
}
exports.default = parseArgs;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJncy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGkvYXJncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEscUNBQXlCO0FBQ3pCLHlDQUE2QjtBQUU3QixnREFBMEI7QUFDMUIsd0VBQWdEO0FBQ2hELDBFQUFrRDtBQUNsRCxvREFBOEI7QUFFOUIsSUFBTSxDQUFDLEdBQUcsZUFBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMvQixJQUFNLENBQUMsR0FBRyxlQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQy9CLElBQU0sQ0FBQyxHQUFHLGVBQUssQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDL0IsSUFBTSxDQUFDLEdBQUcsZUFBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUUvQixrQkFBa0I7QUFDbEIsSUFBTSxJQUFJLEdBQUcsYUFDTCxDQUFDLENBQUMsV0FBVyxDQUFDLGVBQ2YsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLCtEQUNuQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUssQ0FBQyxDQUFDLFVBQVUsQ0FBQyxVQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsOERBQ3JDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBUSxDQUFDLENBQUMsU0FBUyxDQUFDLDREQUMvQixDQUFDLENBQUMsT0FBTyxDQUFDLDBCQUFXLENBQUMsQ0FBQyxVQUFVLENBQUMsWUFDbEMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxnQkFBVyxDQUFDLENBQUMsT0FBTyxDQUFDLHVFQUNoQyxDQUFDLENBQUMsU0FBUyxDQUFDLGFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyx5RUFDN0IsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLDRF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