"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var SEMVER;
(function (SEMVER) {
    SEMVER["major"] = "major";
    SEMVER["premajor"] = "premajor";
    SEMVER["minor"] = "minor";
    SEMVER["preminor"] = "preminor";
    SEMVER["patch"] = "patch";
    SEMVER["prepatch"] = "prepatch";
    SEMVER["noVersion"] = "";
})(SEMVER || (SEMVER = {}));
exports.default = SEMVER;
function getHigherSemverTag(left, right) {
    if (left === SEMVER.major || right === SEMVER.major) {
        return SEMVER.major;
    }
    if (left === SEMVER.minor || right === SEMVER.minor) {
        return SEMVER.minor;
    }
    return SEMVER.patch;
}
exports.getHigherSemverTag = getHigherSemverTag;
function calculateSemVerBump(labels, labelMap, _a) {
    var _b = _a === void 0 ? {} : _a, onlyPublishWithReleaseLabel = _b.onlyPublishWithReleaseLabel, _c = _b.skipReleaseLabels, skipReleaseLabels = _c === void 0 ? [] : _c;
    var labelSet = new Set();
    if (!skipReleaseLabels.includes(labelMap.get('skip-release'))) {
        skipReleaseLabels.push(labelMap.get('skip-release'));
    }
    labels.map(function (pr) {
        pr.forEach(function (label) {
            var userLabel = __spread(labelMap.entries()).find(function (pair) { return pair[1] === label; });
            labelSet.add(userLabel ? userLabel[0] : label);
        });
    });
    var skipRelease = false;
    var isPrerelease = false;
    if (labels.length > 0 && labels[0].length > 0) {
        isPrerelease = labels[0].includes(labelMap.get('prerelease'));
        skipRelease = onlyPublishWithReleaseLabel
            ? !labels[0].includes(labelMap.get('release'))
            : !!labels[0].find(function (label) { return skipReleaseLabels.includes(label); });
    }
    var version = __spread(labelSet).reduce(getHigherSemverTag, SEMVER.patch);
    if (skipRelease) {
        return SEMVER.noVersion;
    }
    if (isPrerelease) {
        if (version === SEMVER.major) {
            return SEMVER.premajor;
        }
        if (version === SEMVER.minor) {
            return SEMVER.preminor;
        }
        return SEMVER.prepatch;
    }
    return version;
}
exports.calculateSemVerBump = calculateSemVerBump;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VtdmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NlbXZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsSUFBSyxNQVFKO0FBUkQsV0FBSyxNQUFNO0lBQ1QseUJBQWUsQ0FBQTtJQUNmLCtCQUFxQixDQUFBO0lBQ3JCLHlCQUFlLENBQUE7SUFDZiwrQkFBcUIsQ0FBQTtJQUNyQix5QkFBZSxDQUFBO0lBQ2YsK0JBQXFCLENBQUE7SUFDckIsd0JBQWMsQ0FBQTtBQUNoQixDQUFDLEVBUkksTUFBTSxLQUFOLE1BQU0sUUFRVjtBQUlELGtCQUFlLE1BQU0sQ0FBQztBQUV0QixTQUFnQixrQkFBa0IsQ0FBQyxJQUFZLEVBQUUsS0FBYTtJQUM1RCxJQUFJLElBQUksS0FBSyxNQUFNLENBQUMsS0FBSyxJQUFJLEtBQUssS0FBSyxNQUFNLENBQUMsS0FBSyxFQUFFO1FBQ25ELE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQztLQUNyQjtJQUVELElBQUksSUFBSSxLQUFLLE1BQU0sQ0FBQyxLQUFLLElBQUksS0FBSyxLQUFLLE1BQU0sQ0FBQyxLQUFLLEVBQUU7UUFDbkQsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDO0tBQ3JCO0lBRUQsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDO0FBQ3RCLENBQUM7QUFWRCxnREFVQztBQU9ELFNBQWdCLG1CQUFtQixDQUNqQyxNQUFrQixFQUNsQixRQUF3QixFQUN4QixFQUE0RTtRQUE1RSw0QkFBNEUsRUFBMUUsNERBQTJCLEVBQUUseUJBQXNCLEVBQXRCLDJDQUFzQjtJQUVyRCxJQUFNLFFBQVEsR0FBRyxJQUFJLEdBQUcsRUFBVSxDQUFDO0lBRW5DLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUUsQ0FBQyxFQUFFO1FBQzlELGlCQUFpQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBRSxDQUFDLENBQUM7S0FDdkQ7SUFFRCxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQUEsRUFBRTtRQUNYLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBQSxLQUFLO1lBQ2QsSUFBTSxTQUFTLEdBQUcsU0FBSSxRQUFRLENBQUMsT0FBTyxFQUFFLEVBQUUsSUFBSSxDQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssRUFBakIsQ0FBaUIsQ0FBQyxDQUFDO1lBQzFFLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2pELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLFdBQVcsR0FBRyxLQUFLLENBQUM7SUFDeEIsSUFBSSxZQUFZLEdBQUcsS0FBSyxDQUFDO0lBRXpCLElBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDN0MsWUFBWSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUUsQ0FBQyxDQUFDO1FBQy9ELFdBQVcsR0FBRywyQkFBMkI7WUFDdkMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBRSxDQUFDO1lBQy9DLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBakMsQ0FBaUMsQ0FBQyxDQUFDO0tBQ2xFO0lBRUQsSUFBTSxPQUFPLEdBQUcsU0FBSSxRQUFRLEVBQUUsTUFBTSxDQUFDLGtCQUFrQixFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUV2RSxJQUFJLFdBQVcsRUFBRTtRQUNmLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQztLQUN6QjtJQUVELElBQUksWUFBWSxFQUFFO1FBQ2hCLElBQUksT0FBTyxLQUFLLE1BQU0sQ0FBQyxLQUFLLEVBQUU7WUFDNUIsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDO1NBQ3hCO1FBRUQsSUFBSSxPQUFPLEtBQUssTUFBTSxDQUFDLEtBQUssRUFBRTtZQUM1QixPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUM7U0FDeEI7UUFFRCxPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUM7S0FDeEI7SUFFRCxPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDO0FBL0NELGtEQStDQyJ9