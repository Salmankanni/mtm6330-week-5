"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var cosmiconfig_1 = __importDefault(require("cosmiconfig"));
var deepmerge_1 = __importDefault(require("deepmerge"));
var dotenv_1 = __importDefault(require("dotenv"));
var path = __importStar(require("path"));
var release_1 = require("./release");
var try_require_1 = __importDefault(require("./utils/try-require"));
function normalizeLabels(config) {
    var labels = release_1.defaultLabelDefinition;
    if (config.labels) {
        var definitions = Object.entries(config.labels).map(function (_a) {
            var _b = __read(_a, 2), label = _b[0], labelDef = _b[1];
            var _c;
            var definition = typeof labelDef === 'string' ? { name: labelDef } : labelDef;
            if (!definition.name) {
                definition.name = label;
            }
            return _c = {},
                _c[label] = definition,
                _c;
        });
        labels = deepmerge_1.default(labels, Object.assign.apply(Object, __spread([{}], definitions)));
    }
    return labels;
}
var Config = /** @class */ (function () {
    function Config(logger) {
        this.logger = logger;
        dotenv_1.default.config();
    }
    /**
     * Load the .autorc from the file system, set up defaults, combine with CLI args
     * load the extends property, load the plugins and start the git remote interface.
     */
    Config.prototype.loadConfig = function (args) {
        return __awaiter(this, void 0, void 0, function () {
            var explorer, result, rawConfig, labels, semVerLabels, skipReleaseLabels;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        explorer = cosmiconfig_1.default('auto');
                        return [4 /*yield*/, explorer.search()];
                    case 1:
                        result = _a.sent();
                        rawConfig = {};
                        if (result && result.config) {
                            rawConfig = result.config;
                        }
                        if (rawConfig.extends) {
                            rawConfig = deepmerge_1.default(rawConfig, this.loadExtendConfig(rawConfig.extends));
                        }
                        labels = normalizeLabels(rawConfig);
                        semVerLabels = release_1.getVersionMap(labels);
                        this.logger.verbose.success('Using SEMVER labels:', '\n', semVerLabels);
                        skipReleaseLabels = rawConfig.skipReleaseLabels || [];
                        if (!skipReleaseLabels.includes(semVerLabels.get('skip-release'))) {
                            skipReleaseLabels.push(semVerLabels.get('skip-release'));
                        }
                        return [2 /*return*/, __assign({}, rawConfig, args, { labels: labels,
                                skipReleaseLabels: skipReleaseLabels })];
                }
            });
        });
    };
    /**
     * Loads a config from a path, package name, or special `auto-config` pattern
     *
     * ex: auto-config-MY_CONFIG
     * ex: @MY_CONFIG/auto-config
     *
     * @param extend Path or name of config to find
     */
    Config.prototype.loadExtendConfig = function (extend) {
        var config = try_require_1.default(extend);
        this.logger.verbose.note(extend + " found: " + config);
        if (!config) {
            var scope = extend + "/auto-config";
            config = try_require_1.default(scope);
            this.logger.verbose.note(scope + " found: " + config);
        }
        if (!config) {
            var scope = "auto-config-" + extend;
            config = try_require_1.default(scope);
            this.logger.verbose.note(scope + " found: " + config);
        }
        if (!config) {
            config = try_require_1.default(path.join(process.cwd(), extend));
        }
        if (typeof config === 'function') {
            return config();
        }
        return config || {};
    };
    return Config;
}());
exports.default = Config;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw0REFBc0M7QUFDdEMsd0RBQThCO0FBQzlCLGtEQUF5QjtBQUN6Qix5Q0FBNkI7QUFHN0IscUNBSW1CO0FBRW5CLG9FQUE2QztBQUk3QyxTQUFTLGVBQWUsQ0FBQyxNQUEwQjtJQUNqRCxJQUFJLE1BQU0sR0FBRyxnQ0FBc0IsQ0FBQztJQUVwQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUU7UUFDakIsSUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUNuRCxVQUFDLEVBQStEO2dCQUEvRCxrQkFBK0QsRUFBOUQsYUFBSyxFQUFFLGdCQUFROztZQUNmLElBQU0sVUFBVSxHQUNkLE9BQU8sUUFBUSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztZQUUvRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRTtnQkFDcEIsVUFBVSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7YUFDekI7WUFFRDtnQkFDRSxHQUFDLEtBQUssSUFBRyxVQUFVO21CQUNuQjtRQUNKLENBQUMsQ0FDRixDQUFDO1FBRUYsTUFBTSxHQUFHLG1CQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLE9BQWIsTUFBTSxZQUFRLEVBQUUsR0FBSyxXQUFXLEdBQUUsQ0FBQztLQUMzRDtJQUVELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFFRDtJQUdFLGdCQUFZLE1BQWU7UUFDekIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7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