"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var url_1 = require("url");
var url_join_1 = __importDefault(require("url-join"));
var make_hooks_1 = require("./utils/make-hooks");
var filterLabel = function (commits, label) {
    return commits.filter(function (commit) { return commit.labels.includes(label); });
};
var Changelog = /** @class */ (function () {
    function Changelog(logger, options) {
        this.logger = logger;
        this.options = options;
        this.hooks = make_hooks_1.makeChangelogHooks();
        this.options.labels.pushToMaster = __assign({ name: 'pushToMaster', title: '⚠️  Pushed to master', description: 'N/A' }, (this.options.labels.pushToMaster || {}));
    }
    Changelog.prototype.loadDefaultHooks = function () {
        var _this = this;
        this.hooks.renderChangelogAuthor.tap('Default', function (author, commit) {
            return _this.createUserLink(author, commit);
        });
        this.hooks.renderChangelogAuthorLine.tap('Default', function (author, user) {
            var authorString = author.name && user ? author.name + " (" + user + ")" : user;
            return authorString ? "- " + authorString : undefined;
        });
        this.hooks.renderChangelogLine.tapPromise('Default', function (currCommits, renderLine) { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, Promise.all(currCommits.map(function (commit) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                        return [2 /*return*/, renderLine(commit)];
                    }); }); }))];
            });
        }); });
        this.hooks.renderChangelogTitle.tap('Default', function (label, changelogTitles) { return "#### " + changelogTitles[label] + "\n"; });
    };
    // Every Commit will either be a PR, jira story, or push to master (patch)
    Changelog.prototype.generateReleaseNotes = function (commits) {
        return __awaiter(this, void 0, void 0, function () {
            var split, sections, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (commits.length === 0) {
                            return [2 /*return*/, ''];
                        }
                        this.logger.verbose.info('Generating release notes for:\n', commits);
                        split = this.splitCommits(commits);
                        this.logger.verbose.info('Split commits into groups');
                        this.logger.veryVerbose.info('\n', split);
                        sections = [];
                        return [4 /*yield*/, this.createLabelSection(split, sections)];
                    case 1:
                        _a.sent();
                        this.logger.verbose.info('Added groups to changelog');
                        return [4 /*yield*/, this.createAuthorSection(split, sections)];
                    case 2:
                        _a.sent();
                        this.logger.verbose.info('Added authors to changelog');
                        result = sections.join('\n\n');
                        this.logger.verbose.info('Successfully generated release notes.');
                        return [2 /*return*/, result];
                }
            });
        });
    };
    Changelog.prototype.createUserLink = function (author, commit) {
        var githubUrl = new url_1.URL(this.options.baseUrl).origin;
        if (author.username === 'invalid-email-address') {
            return;
        }
        return author.username
            ? "[@" + author.username + "](" + url_join_1.default(githubUrl, author.username) + ")"
            : author.email || commit.authorEmail;
    };
    /**
     * Split commits into changelogTitle sections.
     */
    Changelog.prototype.splitCommits = function (commits) {
        var currentCommits = __spread(commits);
        commits
            .filter(function (commit) { return commit.labels.length === 0; })
            .map(function (commit) { return commit.labels.push('patch'); });
        var sections = Object.values(this.options.labels).filter(function (label) { return label.title; });
        return Object.assign.apply(Object, __spread([{}], sections.map(function (label) {
            var _a;
            var matchedCommits = filterLabel(currentCommits, label.name);
            if (matchedCommits.length === 0) {
                return {};
            }
            currentCommits = currentCommits.filter(function (commit) { return !matchedCommits.includes(commit); });
            return _a = {},
                _a[label.name] = matchedCommits,
                _a;
        })));
    };
    Changelog.prototype.createUserLinkList = function (commit) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        result = new Set();
                        return [4 /*yield*/, Promise.all(commit.authors.map(function (author) { return __awaiter(_this, void 0, void 0, function () {
                                var link;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.hooks.renderChangelogAuthor.promise(author, commit, this.options)];
                                        case 1:
                                            link = _a.sent();
                                            if (link) {
                                                result.add(link);
                                            }
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, __spread(result).join(' ')];
                }
            });
        });
    };
    Changelog.prototype.generateCommitNote = function (commit) {
        return __awaiter(this, void 0, void 0, function () {
            var jira, pr, link, prLink, user;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        jira = '';
                        pr = '';
                        if (commit.jira && this.options.jira) {
                            link = url_join_1.default.apply(void 0, __spread([this.options.jira], commit.jira.number));
                            jira = "[" + commit.jira.number + "](" + link + "): ";
                        }
                        if (commit.pullRequest) {
                            prLink = url_join_1.default(this.options.baseUrl, 'pull', commit.pullRequest.number.toString());
                            pr = "[#" + commit.pullRequest.number + "](" + prLink + ")";
                        }
                        return [4 /*yield*/, this.createUserLinkList(commit)];
                    case 1:
                        user = _a.sent();
                        return [2 /*return*/, "- " + jira + commit.subject.trim() + " " + pr + (user ? " (" + user + ")" : '')];
                }
            });
        });
    };
    Changelog.prototype.createAuthorSection = function (split, sections) {
        return __awaiter(this, void 0, void 0, function () {
            var authors, commits, authorSection;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        authors = new Set();
                        commits = Object.values(split).reduce(function (labeledCommits, sectionCommits) { return __spread(labeledCommits, sectionCommits); }, []);
                        return [4 /*yield*/, Promise.all(commits.map(function (commit) { return __awaiter(_this, void 0, void 0, function () {
                                var _this = this;
                                return __generator(this, function (_a) {
                                    commit.authors.map(function (author) { return __awaiter(_this, void 0, void 0, function () {
                                        var user, authorEntry;
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0:
                                                    if (author.username === 'invalid-email-address') {
                                                        return [2 /*return*/];
                                                    }
                                                    return [4 /*yield*/, this.hooks.renderChangelogAuthor.promise(author, commit, this.options)];
                                                case 1:
                                                    user = _a.sent();
                                                    return [4 /*yield*/, this.hooks.renderChangelogAuthorLine.promise(author, user)];
                                                case 2:
                                                    authorEntry = _a.sent();
                                                    if (authorEntry && !authors.has(authorEntry)) {
                                                        authors.add(authorEntry);
                                                    }
                                                    return [2 /*return*/];
                                            }
                                        });
                                    }); });
                                    return [2 /*return*/];
                                });
                            }); }))];
                    case 1:
                        _a.sent();
                        if (authors.size === 0) {
                            return [2 /*return*/];
                        }
                        authorSection = "#### Authors: " + authors.size + "\n\n";
                        authorSection += __spread(authors).join('\n');
                        sections.push(authorSection);
                        return [2 /*return*/];
                }
            });
        });
    };
    Changelog.prototype.createLabelSection = function (split, sections) {
        return __awaiter(this, void 0, void 0, function () {
            var changelogTitles;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        changelogTitles = Object.entries(this.options.labels).reduce(function (titles, _a) {
                            var _b = __read(_a, 2), labelDef = _b[1];
                            if (labelDef.title) {
                                titles[labelDef.name] = labelDef.title;
                            }
                            return titles;
                        }, {});
                        return [4 /*yield*/, Promise.all(Object.entries(split).map(function (_a) {
                                var _b = __read(_a, 2), label = _b[0], labelCommits = _b[1];
                                return __awaiter(_this, void 0, void 0, function () {
                                    var title, lines;
                                    var _this = this;
                                    return __generator(this, function (_c) {
                                        switch (_c.label) {
                                            case 0: return [4 /*yield*/, this.hooks.renderChangelogTitle.promise(label, changelogTitles)];
                                            case 1:
                                                title = _c.sent();
                                                return [4 /*yield*/, this.hooks.renderChangelogLine.promise(labelCommits, function (commit) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                                        return [2 /*return*/, this.generateCommitNote(commit)];
                                                    }); }); })];
                                            case 2:
                                                lines = _c.sent();
                                                sections.push(__spread([title], lines).join('\n'));
                                                return [2 /*return*/];
                                        }
                                    });
                                });
                            }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return Changelog;
}());
exports.default = Changelog;
//# sourceMappingURL=data:application/json;base64,